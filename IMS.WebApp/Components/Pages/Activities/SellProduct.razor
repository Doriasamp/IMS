@page "/sell"
@rendermode InteractiveServer
@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent
@inject IJSRuntime JSRuntime
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase



<h3>Sell Product</h3>
<br />

<EditForm Model="sellViewModel" FormName="sellForm" OnValidSubmit="Sell" id="sell-form">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="po">Sales Order #</label>
        <InputText id="po" class="form-control" @bind-Value="sellViewModel.SalesOrderNumber" />
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Sell"
                SearchFunction="SearchProduct"
                OnItemSelected="HandleItemSelected" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber TValue="int" id="quantity" class="form-control" @bind-Value="sellViewModel.QuantityToSell" />
    </div>
    <div class="form-group">
        <label for="unit-price">Unit Price</label>
        <InputNumber TValue="double" id="unit-price" class="form-control" @bind-Value="sellViewModel.UnitPrice" />
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Sell</button>

</EditForm>




@code {

    private SellViewModel sellViewModel = new SellViewModel();
    private Product? selectedProduct;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "sell-form");
        }

    }



    /// <summary>
    /// Function passed to Function delegate in the AutoCompleteComponent
    /// </summary>
    /// <param name="userInput"></param>
    /// <returns>A list of ItemViewModel with id and name properties.</returns>
    private async Task<List<ItemViewModel>?> SearchProduct(string input)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(input);

        if (list is null) return null;

        // Use projection to convert Product model to the ItemViewModel defined in code block
        // within the AutoCompleteComponent blazor component
        return list.Select(i => new ItemViewModel
            {
                Id = i.ProductId,
                Name = i.ProductName
            })?.ToList();
    }


    /// <summary>
    /// Function passed to the OnItemSelected delegate in the AutoCompleteComponent
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        this.sellViewModel.ProductId = item.Id;
        this.sellViewModel.Product = selectedProduct;
        this.sellViewModel.UnitPrice = selectedProduct.Price;
    }


    private async Task Sell()
    {
        await SellProductUseCase.ExecuteAsync(
            this.sellViewModel.SalesOrderNumber,
            this.selectedProduct,
            this.sellViewModel.QuantityToSell,
            this.sellViewModel.UnitPrice,
            "Andrea");

        this.sellViewModel = new SellViewModel();
        this.selectedProduct = null;
    }

}

